name: WorkVPN CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  # Android Build & Test
  android:
    name: Android Build & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        working-directory: ./workvpn-android
        run: chmod +x gradlew

      - name: Run Android tests
        working-directory: ./workvpn-android
        run: ./gradlew test

      - name: Build Android Debug APK
        working-directory: ./workvpn-android
        run: ./gradlew assembleDebug

      - name: Upload Android APK
        uses: actions/upload-artifact@v3
        with:
          name: android-debug-apk
          path: workvpn-android/app/build/outputs/apk/debug/app-debug.apk

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: android-test-results
          path: workvpn-android/app/build/reports/tests/

  # Desktop Build & Test
  desktop:
    name: Desktop Build & Test
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: workvpn-desktop/package-lock.json

      - name: Install OpenVPN (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y openvpn

      - name: Install OpenVPN (macOS)
        if: runner.os == 'macOS'
        run: brew install openvpn

      - name: Install OpenVPN (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install openvpn -y

      - name: Install dependencies
        working-directory: ./workvpn-desktop
        run: npm ci

      - name: Run Desktop tests
        working-directory: ./workvpn-desktop
        run: npm test

      - name: Build Desktop app
        working-directory: ./workvpn-desktop
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: desktop-build-${{ matrix.os }}
          path: |
            workvpn-desktop/dist/
            workvpn-desktop/out/

  # iOS Build & Test (macOS only)
  ios:
    name: iOS Build & Test
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      - name: Install CocoaPods
        run: |
          sudo gem install cocoapods

      - name: Install iOS dependencies
        working-directory: ./workvpn-ios
        run: pod install

      - name: Select Xcode version
        run: sudo xcode-select -s /Applications/Xcode_15.0.app/Contents/Developer

      - name: Build iOS app
        working-directory: ./workvpn-ios
        run: |
          xcodebuild -workspace WorkVPN.xcworkspace \
                     -scheme WorkVPN \
                     -configuration Debug \
                     -sdk iphonesimulator \
                     -destination 'platform=iOS Simulator,name=iPhone 15,OS=latest' \
                     clean build \
                     CODE_SIGNING_ALLOWED=NO

      - name: Run iOS tests
        working-directory: ./workvpn-ios
        run: |
          xcodebuild test \
                     -workspace WorkVPN.xcworkspace \
                     -scheme WorkVPN \
                     -sdk iphonesimulator \
                     -destination 'platform=iOS Simulator,name=iPhone 15,OS=latest' || true

  # Security Scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Lint & Code Quality
  lint:
    name: Lint & Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Desktop dependencies
        working-directory: ./workvpn-desktop
        run: npm ci

      - name: Run TypeScript lint
        working-directory: ./workvpn-desktop
        run: npm run lint || echo "No lint script configured"

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission for gradlew
        working-directory: ./workvpn-android
        run: chmod +x gradlew

      - name: Run Kotlin lint
        working-directory: ./workvpn-android
        run: ./gradlew ktlintCheck || echo "No ktlint configured"

  # Release Build (on tags)
  release:
    name: Create Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [android, desktop, ios]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            android-debug-apk/*.apk
            desktop-build-*/**/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
